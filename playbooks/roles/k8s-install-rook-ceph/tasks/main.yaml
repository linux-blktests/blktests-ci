# SPDX-License-Identifier: GPL-2.0-or-later
#
# Copyright (c) 2025 Western Digital Corporation or its affiliates.
#
# Authors: Dennis Maisenbacher (dennis.maisenbacher@wdc.com)

- include_vars: ../../../../variables.yaml

- name: "Ensure ~/tmp-ansible exists for rook-ceph deployment files"
  file:
    path: "~/tmp-ansible"
    state: directory

- name: "Clone rook repository"
  ansible.builtin.git:
    repo: "{{ rook_ceph_repo }}"
    dest: "~/tmp-ansible/rook"
    version: "{{ rook_ceph_version }}"
    single_branch: true

#Automatic device discovery stays on purpose disabled.
#We don't want new test drives to be picked up by the ceph cluster.
- name: "Deploy Rook components"
  shell: |
    kubectl create -f crds.yaml -f common.yaml -f operator.yaml
  args:
    chdir: ~/tmp-ansible/rook/deploy/examples

- name: "Wait for rook-ceph pods to become ready"
  shell: "kubectl wait --namespace=rook-ceph --for=condition=Ready pod --all --timeout=2000s"

- name: "Adjust device names that are allowed to be deployed in the cluster -> All nvme devices that are not unbound by default are allowed to be used"
  ansible.builtin.lineinfile:
    path: ~/tmp-ansible/rook/deploy/examples/cluster.yaml
    regexp: '^(\s*)#deviceFilter:'
    line: '    deviceFilter: ^nvme.*'
    state: present

- name: "Deploy Rook cluster"
  shell: |
    kubectl create -f cluster.yaml
  args:
    chdir: ~/tmp-ansible/rook/deploy/examples

- name: "Deploy ceph rbd (block) storage class"
  shell: |
    kubectl create -f storageclass.yaml
  args:
    chdir: ~/tmp-ansible/rook/deploy/examples/csi/rbd

- name: "Set rook-ceph-block as default storage-class"
  shell: |
    kubectl patch storageclass rook-ceph-block -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'

- name: "Deploy ceph rbd volumesnapshotclass"
  shell: |
    kubectl create -f snapshotclass.yaml
  args:
    chdir: ~/tmp-ansible/rook/deploy/examples/csi/rbd

- name: "Deploy ceph-fs"
  shell: |
    kubectl create -f filesystem.yaml
  args:
    chdir: ~/tmp-ansible/rook/deploy/examples

- name: "Wait for rook-ceph-mds pods to become ready"
  shell: "kubectl wait --namespace=rook-ceph --for=condition=Ready pod -l app=rook-ceph-mds --timeout=2000s"

- name: "Deploy ceph-fs storageclass"
  shell: |
    kubectl create -f storageclass.yaml
  args:
    chdir: ~/tmp-ansible/rook/deploy/examples/csi/cephfs

- name: "Add Prometheus Community helm repo"
  kubernetes.core.helm_repository:
    name: prometheus-community
    repo_url: "{{ prometheus_helm_chart_url }}"

- name: "Install Prometheus Community chart"
  kubernetes.core.helm:
    name: prometheus
    update_repo_cache: true
    namespace: prometheus-system
    create_namespace: true
    chart_ref: prometheus-community/kube-prometheus-stack

- name: "Wait for prometheus pods to become ready"
  shell: "kubectl wait --namespace=prometheus-system --for=condition=Ready pod --all --timeout=2000s"

- name: "Deploy rook-ceph prometheus components"
  shell: |
    kubectl create -f service-monitor.yaml -f exporter-service-monitor.yaml -f prometheus.yaml -f prometheus-service.yaml
  args:
    chdir: ~/tmp-ansible/rook/deploy/examples/monitoring

- name: "Wait for rook-ceph prometheus pods to become ready"
  shell: "kubectl wait --namespace=rook-ceph --for=condition=Ready pod prometheus-rook-prometheus-0 --timeout=2000s"

- name: "Deploy rook-ceph prometheus monitoring rules"
  shell: |
    kubectl create -f rbac.yaml -f localrules.yaml
  args:
    chdir: ~/tmp-ansible/rook/deploy/examples/monitoring

- name: "Patch CephCluster to enable monitoring"
  shell: |
    kubectl patch cephcluster rook-ceph -n rook-ceph --type merge -p '{"spec":{"monitoring":{"enabled":true}}}'
